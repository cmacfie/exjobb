C: Okay so today's the 6th of September

A: December

C: December, sorry! And we're at the Qlik's
offices. And this is Christoffer MacFie
talking. And I'm here with...

A: Amela Ajanovic

C: And you work here at the Qlik?

A: Yeah I work at Qlik as a software engineer.

C: Mm! Ehm... So I have some questions for you regarding...
We're gonna to talk about API related stuff

A: Mm.

C: And we're gonna gonna talk a little
bit about release notes and we kind of
talked a little bit about online
communities around software platforms.
And you looked at some material
beforehand.

A: Yeah.

C: So if we start with API
related things...

A: Okay

C: Ehm... So... When you're
looking at... How important would you say
that API examples and documentation is for
a software platform?

A: Probably one of the
most important things when it comes to
documentation because I would say most;
for most people that's the first thing
you look at.

C: Mm!

A: Because if it's an API
you're not familiar with the examples
are the... ehm... the way you actually want to get
familiar with how things are working...

C: Mm!

A: So... Very important.

C: So when you look at API examples, what are
you trying to... ehm... what are you looking for
like when you look up API examples what
is it what is it you want to find out?

A: Ehm.. I don't know I guess it depends on what
I'm looking for sometimes it can be if
I'm looking at a specific method I want
to be able to find that quickly

C: Mm!

A: And to have an example of how that thing works
in specific way. Ehm... And I guess it should be
clear examples, consistent examples and...
Yeah I don't know.

C: Mm. Would you...

A: And; and also that there's some
explanation, not just code

C: Mm.

A: But also explanation about what that code does

C: Mm.

A: Ehm... yeah some kind of documentation about
the methods, and what they do, and... how
they should behave.

C: Mm.

A: Mm.

C: So is it; would you; it's more of a... so it's
a mixture of trying to understand how
they are used and where they were used?
Or...

A: Yeah! Yeah, of course.

C: And copy paste in code, is that something that is
good for code examples as well or just
to...

A: Eh, what do you mean for; you mean for the
developer to be able to just copy paste
and try something out?

C: Mm.

A: Ehm... I think it's good
if you can get like; if you can try
something out quickly... just to see that
that's what you're... that it works I guess?
Ehm... But it doesn't need to be a complete
example in which, you know... Everything is
done for you.

C: Mm. It's more important of a concise example
with just what they're trying to explain...

A: Mm.

C: Rather than a big one?

A: Yeah I think it's
good to have... It really depends on the
case. Sometimes it's nice to have both.

C: Mm.

A: Like to use that example in the context
of something bigger.

 C: Mm.

 A: Ehm... But it it really
depends on the method: if it's something;
something as simple as... you
know, you need to do a copy paste, then
it's enough to just focus on that simple
method: how to do a copy paste with this
API.

C: Okay

A: Ehm... Because it doesn't really have a lot of
dependencies on other things.

 C: Mm.

 A: So I think it really depends... When it comes to;
 it's not really API is but in Qlik, when it
comes to... the scripting language when you
developed apps and things... for example
there it's nice to have examples that
are within a bigger context.

C: Mm.

A: Ehm... So yeah, it kind of depends. But I would
if I have to choose then it would be; it
would be more concise examples that just
show you: okay this is what I wanted to
know and I don't have to go searching
like a pile of examples.

C: So you said... In the context of Qlik
it's better to have a bigger example.
When is it not... When... In what context
is better to have a smaller example than...
It's like... What makes Qlik, ehm... need bigger;


A: Yeah, yeah. So in this sense it
wasn't Qlik as everything related to
Qlik. It was specifically because, yeah... I
always complain, and other people I think
always complain, with the documentation
regarding the app development and
scripting...

C: Mm.

A: And in that case you need more
knowledge before you can jump into a
specific...

C: Mm.

A: ...method. So there you kind of;
it's important to have more step-by-step
things.

C: Okay, so... because it's more advanced we need, ehm...

A: Yeah... Yeah because you can't just; You need
some prerequisite knowledge in order to
get to that...

C: Okay.

A: So I think in every
documentation it's important if you know
that you need some... some prerequisite
knowledge...

C: Mm.

A: ...that it's not maybe very
common that it's nice to have those
examples as well.

C: Okay.

A: Or at least some links
or references to where can you learn
about that.

C: Mm.

A: Because it's; yeah it can be
quite annoying when you get; start
reading an explanation and then there's
ten; ten things you don't even know what
they mean

C: Mm.

A: And it's nowhere explained...

C: Okay.

A: So yeah...

C: Ehm... So how does it affect you if you're, ehm, looking
at API examples and they're... not very
good. How does that affect your work?

A: Ehm... Well, if I have a choice to find something
else to use then I would just... do that.

C: Mm.

A: Ehm... If I don't have a choice... well usually you
have a choice, I mean... Usually you can
choose between different... different
options of... which API used to go; go to do... to do the
same thing. Ehm... So in that case if you select
one thing and then you see the
documentation is bad, usually you just
scrape it and turn to something
different.

 C: Mm.

 A: Ehm... had a situation like that
recently.

 C: Mm.

 A: When we started and that we
actually implemented stuff using this...
I forgot how it's called... doesn't really
matter. But we had written code and
everything and... yeah it was all the
working examples but more and more we
were working with it we realized the
documentation is really lacking...

 C: Mm.

 A: ...and it was difficult once you get into problems
to fix them... So we actually just scraped
that and started all over again with a
different...

 C: Mm.

 A: So, with a different solution.
So, yeah... it; it; it  definitely affects the
developer in a... in a bad way.

C: Ehm... So looking at the
material, is there anything that you saw
that... Okay this is very important or this
is not important, or is there some key
aspects that you're missing here that
you usually look at...

 A: Ehm.. it was a lot of
pictures!

 C: Yeah!

 A: But yeah, it's definitely
good that there is some; there were some
examples of how to do... well in this case,
yeah... ehm... very basic example, like the; this is
how you get started. That's nice! And then
some example of, okay this is one step
more...

 C: Mm.

 A: ...a bit more advanced. So I think
that's a nice way to present it, to have
like a... the very basic one and then to go
into... this is how you can modify things.

C: Mm.

A: So I definitely like that. Ehm... and yeah, I
like that you have in the meta descriptions,
that you have listed like the parameters
and their types and description. That's
always helpful.

C: Mm.

A: Ehm...

C: So is that something that is something
that should always exist, or is it some
kind of like a bonus? "This is good if it
exists"?

A: I would say it's something that
should always exist.

C: Mm.

A: So, I mean... It seems
like a very basic, ehm... basic description to
have. Like when you want to use the method
you want to know which parameters it
has, what type they can be... and yeah, what
do they actually do.

C: Mm.

A: So for me that's
kind of a must. Examples as well! Like
always... Ehm... Yeah, the... the release notes...
that's always good to
have.

C: Mm.

A: ...just to make sure you're not using
something that... doesn't work anymore or
will be deprecated once you upgrade.

C: Mm.

A: So yeah.

C: I'll come to that later... ehm...
 So another thing about, you've
touched upon this a bit, to have working
code quickly.

A: Mm.

C: Is that something that is
important to you?

A: Ehm... I think it's nice to
have working code quickly... To have some
kind of a basic example quickly.

C: Mm.

A: But then
once, of course, it would usually need
more work and more time when you want to
have something more advanced.

C: Mm.

A: But it's nice to be able to say: "Okay,
this is how I can at least get the setup
part done".

C: Mm.

A: And I can see that I get
something out. So, you don't have to spend
a day and then, "oh this this doesn't
work at all".

C: Yeah.

A: So I think having some
kind of a... a basic working example, it's
important.

C: So in what situation are you
willing to accept not having working
code quickly, is it always needed to have
just the... getting basics... "okay this is
rendering", ehm... and then go more advanced, or
you wait for a long time...

A: I guess if I... if I know that it's something that
definitely works, that it doesn't matter...
I don't; I don't need to be the one testing it.

C: Mm.

A: ...so it's something that's, eh...
how do you say, ehm... it's
kind of a standard. You know people are
using this and it works, I'm not gonna
run into some trouble where: "oh this is
very experimental".

C: Mm.

A: That someone wrote and...
yeah I need to be the one testing it.
So I guess in that case it doesn't really
have to be, ehm... a quick working example.

C: Mm.

A: Because I'm already aware; okay maybe
there is even a community around the... the
solution so...

C: Mm.

A: Yeah. Maybe that's... That's one
reason.

C: But you, ehm... You said that early that
he scraped and started over because of
the documentation being poor.

A: Yeah.

C: Ehm... So that was
more... You work is with something new, then...

A: Mm...

C: Did you have start; ehm... Was working code a
issue there, ehm... or just that you saw that this
wasn't scalable if this documentation is
poor?

A: Yeah it's; so exactly it was, ehm...
 It was; You could get a quick working example
and that's quick; in that case quickly.

C: Mm.

A: And you could do the basic things
quickly and it worked well. But after a
while every time you ran into a problem
and you wanted to fix it and you look
into the documentation it's like: it
doesn't say anything here.

C: Okay.

A: And if you try to google it it's, you know... maybe
you'll find something, maybe you don't, so
you're kind of left on your own.

C: Mm.

A: Which is not a very nice thing. Or something like
that does; like the answer does exist in
the documentation but you need to search
for it for half an hour because it's not
ordered in a correct way or it's very
inconsistent or I don't know...

C: Mm.

A: So after... Kind of... How do you say? After
having the same problem multiple times...

C: Mm.

A: ...then we realized: "Okay, if this continues
happening you just keep losing time, every
time you want to fix something". So we
kind of scraped it and did an
investigation: "Okay what are our other
options?". And in this case, let's try to
look at the documentation straight away
and see if all of the problems we had
with the older one are now gonna be
fixed.

C: Mm.

A: So yeah.

C: So would you say that... working
code quickly is, ehm... if the documentation is
good and the API examples are good, will
you always have working code quickly? Are
those linked?

A: Eh... Yeah! They're definitely
linked. The better the documentation
is the easier it will be for you to get;
get up and running.

C: Mm.

A: I mean...

C: But obviously, as you said, then the other way around doesn't work.
Having working code quickly it doesn't
mean that the documentation will be good?

A: Yeah. Yeah in that case it doesn't so link. So...
Yeah it kind of... The good documentation
brings a lot of good things with it as well. And
the bad documentation will bring a lot
of bad things with it.

C: Mm.

A: Ehm... But yeah. I guess even in
bad documentation it's, ehm... it's possible to
have, ehm... basic examples.

C: Mm.

A: But then once you
get into the more advanced stuff, then it
fails you.

C: Mm.

A: So...

C: So the documentation it's a very key
part of... it effects everything?

A: Yeah, yeah yeah. Definitely.


//Release notes



C: Okay! So if we move over more to talk about
release notes.

A: Mm.

C: In general, how often would
you say that you look at release notes?

A: Ehm... Not very often really, ehm... But it's usually
not me who and; who has to decide between
like which software we are using or
which solutions, which api's so... I guess
it's not so often that I; that I look at
it because of that, ehm...

C: So...

A: But yeah but I think it's still; it's
still important to be able to find
release notes.

C: Mm.

A: Because eventually you
will want to like; you want to upgrade.

C: Mm.

A: Whatever software you're using. And in
that case, if you don't have
documentation you can easily run into
trouble.

C: Mm.

A: If you don't have release notes...

C: So... When you end up looking
at release notes, under what circumstances,
since you're not as you said the decider
to upgrade... when you look at them why; how
come you do that?

A: I don't know if I've ever looked at release notes...

C: [laughter]

A: It's really for when it
comes to api's, ehm...

C: Even not when if we take
the context that you're working on
something privately... at home, for example.

A: Yeah... I guess, yeah. If you... If you work on
something privately and then, ehm... in that
case it will make more sense to look at
release notes, but at the same time if
you look; if you're working on
something privately that's like just a... it
doesn't need to go into production...

C: Mm.

A: ...or something then you don't care too much
about if you're using a deprecated
method or not. Ehm... so yeah. But I think when
it comes to, ehm... I mean I can talk about in
the context of, ehm... Since our team is working
with API governance and the entire work;
kind of the entire... How you say... job, let's
say job. Where the goal is to present the
API changes and to make sure that the
customers that are using Qlik API is
know; what has what has changed between
releases. Because, for them when they want
to upgrade to a new version of Qlik Sense...
That's very important.

C: Mm.

A: So, ehm... From from that
perspective, looking at how; how much
other people are interested
in having us present that, then it seems
like it's quite important. [laughter]

C: Yeah. So what is important to have in release notes?

A: Ehm... I guess it's important to have, ehm... Enough
details so that people are know; people
know what; what has happened between
releases.

C: Mm.

A: Ehm... For us, we usually just; and I
think most, they just present kind of
what has... What has changed if you have
new methods or new ways of doing things
and... if you are supposed to avoid some
methods.

C: Mm.

A: That you were using before.

C: So in the material we have a very detailed
release note and very non detailed.

A: Yeah.

C: Do you see any... ups or downs with either
version.

A: Ehm... Yes... Yeah, so here in the short
release notes, when you have like the new/updated,
 you don't really know what has
changed. If one of these has been updated...
So it doesn't say from... It doesn't say
which one of these are completely new,
which are updated and how they are
updated. So that's something I; That would
be my first question, like I don't know
what has happened I just know something
has changed, but it's what exactly? I have
no idea. And then in the deprecated one, you see
that four methods have been deprecated
but then if you have the; if you have
used these methods in your code it...
doesn't say what you should do instead.

C: Mm.

A: So you're kind of left wondering:
"Okay, how am I supposed to fix my code?"

C: Mm.

A: Ehm.. And I think this was fixed in the big
change log... Yeah, you have a list of the
deprecated methods and you
specify what you should use instead, ehm... Yeah,
even having the reasoning why you remove
something, I think; I think that's nice, ehm...
When you defecate it kind of builds, ehm... How
you say... It builds trust.

C: Mm.

A: When you can explain why we did this change.

C: So, ehm... If we
take the bigger version. Is it too
detailed, is to like... it; or is it like how
it should be, in quotations. You have any
issues with that?

A: Yeah, I didn't read through it completely, but...
I think when it comes to release
notes if you would choose between having
not enough and too much it's better to
have too much.

C: Mm.

A: Ehm... I mean if it's like a few
pages or like a screen... You usually know
what you want to look for so it's easy
to find even if it's a big; big text.
But down here... Yeah I think it's nice. It
seems like I wouldn't have it... I wouldn't
need to have it shorter than this.

C: Mm.

A: Yeah, having bugs and talking
about when it was introduced... Yeah. I think it's good.

C: So, ehm... How, ehm... If there
are; if the release notes are poorly
written...

A: Mm.

C: How would it affect you?

A: I think it's bad when it comes to... kind of
the trust I mentioned between whoever is
using the API and whoever is developing.

C: Mm.

A: Ehm... If it's a big company
such as Qlik... I know it's always really
big; it's a big deal in a bad way if; if
you upgrade to a new version of Sense
and all of a sudden things are not
working.

C: Mm.

A: I think it reflects really
poorly on the company, ehm... And yeah it's
definitely a big deal.

C: Mm. Are there any other way of obtaining
this kind of information than release
notes, or is that the only... is that the
go-to way of finding out this?

A: Finding out kind of the changes between releases?

C: Yeah. Some companies, ehm... Take more care of
release notes, and some don't.

A: Mm.

C: But, ehm... If you don't have good release notes... These
companies still exist.

A: Mm.

C: Do they have some other way of
presenting this or is it just that they
have poor release notes?

A: Yeah, I'm not sure what the other way would be? I guess
depends on how you call it, but yeah
there should be some way of finding out
what has happened in between releases, I
would say.

// Online Community

C: Mm. So if we move over to, ehm... and talk
about online communities instead.

A: Mm.


C: Ehm... [long pause].  So, yeah; How often do you take help from online
communities when working.

A: All the time.

C: All the time.

A: Yeah.

C: So... So how important is
it for you when you work with software that
there there is an online community
around it?

A: Ehm... I think it's quite important
because sometimes, even when you have a
documentation that's average or even
good, it's always nice to have online
communities because you have then people
that's run into the same issues as you
do.

C: Mm.

A: And I think it's enough to be in a
community; it can be either on github
like you have opened issues on the
repository... something as small as that or
just enough users that use the software
so you get for example and Stack
Overflow you can see issues of people
using the same thing. It doesn't have to
be like a specific, ehm... Site that's dedicated
just to that product.

C: Mm.

A: I think online; when it comes to online community it's like
anywhere on the internet.

C: Mm.

A: But yeah. I think it's definitely important.

C: So even; so even if the documentation was flawless
you'd still want a on my community around
it?

A: Yeah, I think it's still nice to have
an online community. Because then you see
that people are actually using...

C: Mm.

A: Using it. Like the documentation can be perfect
but if no one is using this then why
should I?

C: So is it, ehm... Important to feel like
you are a part of a community?

A: Ehm... Yeah! I would say so.

C: Ehm... So why is it important then? What happens
if, ehm... You're working with a software that
doesn't have an online community, how
does that make you feel?

A: I don't know. It seems like, as I said, like why am I the
only one using this?

C: Mm.

A: That will be kind of
my question. If I try to; if I find... I don't know,
some software, some API or some product and I can't find anyone
else using that thing I would; it would
be like "okay there's something wrong about it.
There's something that doesn't fit".

C: Yeah.

A: Ehm... So I think in
in that sense, it's important to feel
like: "Okay, there are other people using
it, other people that maybe... have run into
the same issues and have solved the same
issues"... And you have someone also to turn
to kind of when you run into problems, so...

C: So are there any; can you think of; if you
try to think of communities you've
encountered that you liked and encountered
communities that you didn't like...

 A: Mm.

 C: What are the differences between these two
communities?

 A: Ehm... Yeah, I'm not sure if I have
 examples of communities that
I didn't like you.

 C: Mm.

 A: Ehm...

 C: Can you think of
things that are... when you come into a
community that you feel like "ahh, I like
this community!". Some aspects that that
community had that you were like: "Okay,
this is this is positive".

 A: Yeah... I'm not sure
in the sense of... like working with api's.
Because for me when I say... In that sense,
it's not like a specific place you go to
and you are talking only about... It's; it's
just having people that are using it and
it can be as I said on github or in
Stack Overflow or, ehm... Yeah wherever.

 C: It's important that it feels alive, the
community?

A: Yeah, yeah. That's for sure.

C: And is it, ehm... is it important that it feels
helpful?

A: Yeah. Yeah, I mean if, ehm... if you see
that there are people; or there is some
type of online community but there's
either very little people or people that
are not; not active in it then it's
really not useful in the end.

C: Mm.

A: Ehm.. And yeah you to be able to engage with other people.

C: Ehm... Is it important that, ehm... the software; the
company connected to the software that
you're using.

A: Mhm.

C: That they're part of the
community?

A: Yeah,  I think that's always
good. I think it... I don't think it's
necessary... that they are part of the
community but I think it... it would make
the... the consumer feel better about using
the product, and feel... Yeah, again coming
back to the trust and the relationship
between the the product and the user.

C: Mm.

A: So, it's; it can't be a bad thing, I would say.

C: Okay. Ehm... So is there a difference if you're
using something big, like a software
platform, compared to something small
like a library? Ehm... What you expect from
an online community?

A: Yeah, I think it's definitely; there's
definitely a difference. I mean for; for
something small like a library, you
usually... Yeah you don't need the same
level of interaction basically, and
usually it's something that you will
just, ehm... use a few times and don't think
about it. But when it comes to the
platform, it's probably something you
interact with, ehm... Constantly.

C: Mm.

A: So you kind
of want to have... Yeah then it's more
important to have a bigger community, an
online community, or even a
separate space just for...

C: Mm.

A: Just for the platform itself. I'm...

C: ...more important with, eh... The bigger it is, the more
important?

A: Yeah, yeah I would; I mean when it comes to a small library,
basically if you find something on
github... To me what I look at is that it's
updated, it doesn't really need to have
an online community around it as long as you
see that it's still ongoing and that
it's not dead when it comes to updates.
So, yeah. It's, it's... The size matters.

C: Yeah. So, it; Like, overall... What is it that you want
from an online community?

A: Ehm... I guess I can
think about it in terms of Qlik sense,
and that type of community... But yeah I
think I would like to have... Yeah activity
and people interacting with each other
and having questions and examples and... Yeah.

C: Mm. Ehm... Is there anything we've.... You want to ask
me, or something you thought about... That
you thought I'd ask that yeah I haven't?
Or something that you...

A: I don't know. Nothing that I can think about.

C: Ehm... Then I think that I've got all the answers I need.

A: Okay, great.

C: Thank you very much.

A: Thank you.
